package plugins.mBurda.filters;

import java.awt.image.BufferedImage;
import icy.gui.dialog.MessageDialog;
import icy.gui.frame.progress.AnnounceFrame;
import icy.sequence.Sequence;
import plugins.adufour.ezplug.*;

public class CurvilinearStructures extends EzPlug {

	Vesselness2D ves = null;
	Neuriteness2D neu = null;
	
	
	EzVarBoolean vesselness = new EzVarBoolean("Compute Vesselness?",true);
	EzVarBoolean neuriteness = new EzVarBoolean("Compute neuriteness?",true);
	EzVarDouble betaThreshold =new EzVarDouble("Disparsity control",0,-50,50,0.05);
	EzVarDouble gammaThreshold = new EzVarDouble("Relative brightness control",0,-30,30,0.02);
	EzVarDouble cutoffValue = new EzVarDouble("Cutoff value",0,-100,100,0.05);
	EzVarDouble threshold = new EzVarDouble("Threshold",0,-100,100,1);
	EzVarDouble gainFactor = new EzVarDouble("Gain factor",0,-50,50,1);
	EzVarBoolean vesPhase = new EzVarBoolean("Compute vesselness with phase congruency?",true);
	EzVarBoolean neuPhase = new EzVarBoolean("Compute neuriteness with phase congruency?",true);
	EzVarInteger angleKernels = new EzVarInteger("Number of kernels for angle computation.",2,2,8,2);
	EzVarInteger scaleKernels = new EzVarInteger("Number of kernels for scale computation.",1,1,8,1);
	
	EzGroup vesGroup = new EzGroup("Vesselness",betaThreshold,gammaThreshold);
	EzGroup phaseCongGroup = new EzGroup("Phase congruency parameters",threshold,cutoffValue,gainFactor);
	EzGroup outputGroup = new EzGroup("Show output",vesselness,vesPhase,neuriteness,neuPhase);
	EzGroup kernelGroup = new EzGroup("Kernel parametrization",angleKernels,scaleKernels);
	
	@Override
	protected void initialize() {
		addEzComponent(outputGroup);
		addEzComponent(vesGroup);
		addEzComponent(phaseCongGroup);
		addEzComponent(kernelGroup);
	}

	@Override
	protected void execute() {
		ves = null;
		neu = null;

		BufferedImage img = getActiveImage();
		if(img == null) {
			MessageDialog.showDialog("This plugin needs opened image.");
			return;
		} else {
			new AnnounceFrame("Plugin runs on image "+ getActiveSequence().getName());
		}
		double[] scs = {scaleKernels.getValue()};
		{
			int tmp = 1;
			for(int i=2;i<=scaleKernels.getValue();i*=2){
				tmp=i;
			}
			scs = new double[tmp];
		}
		for(int i=0;i<scs.length;i++){
			scs[i] = 3* Math.pow(2.1,i);
		}
		
		double[] ors = {angleKernels.getValue()};
		{
			int tmp = 2;
			for(int i=2;i<=angleKernels.getValue();i*=2){
				tmp=i;
			}
			ors = new double[tmp];
		}
		for(int i=0;i<ors.length;i++){
			ors[i] = ((double)(i)/ors.length*Math.PI);
		}
		if(vesselness.getValue()){
			ves = new Vesselness2D(img, betaThreshold.getValue(), gammaThreshold.getValue());
			addSequence(new Sequence("Vesselness",ves.makeImage2D()));
		}
		if(vesPhase.getValue()){
			if(ves == null) ves = new Vesselness2D(img, betaThreshold.getValue(), gammaThreshold.getValue());
			Filter.phaseCong = Computations.getPhaseCong(Computations.FourierTransform2D(Filter.source,false), 
					scs, ors, threshold.getValue(), cutoffValue.getValue(), gainFactor.getValue(),img.getWidth(),img.getHeight());
			addSequence(new Sequence("Vesselness with phase congurency",ves.makeImageWithPhase2D()));
		}
		if(neuriteness.getValue()){
			neu = new Neuriteness2D(img, -1/3);
			addSequence(new Sequence("Neuriteness",neu.makeImage2D()));
		}
		if(neuPhase.getValue()){
			if(neu == null) neu = new Neuriteness2D(img, -1/3);
			if(!vesPhase.getValue()) Filter.phaseCong = Computations.getPhaseCong(Computations.FourierTransform2D(Filter.source,true), 
					scs, ors, threshold.getValue(), cutoffValue.getValue(), gainFactor.getValue(),img.getWidth(),img.getHeight());
			addSequence(new Sequence("Neuriteness with phase",neu.makeImageWithPhase2D()));
		}

		}

	@Override
	public void clean() {
		// TODO Auto-generated by Icy4Eclipse
	}
}
